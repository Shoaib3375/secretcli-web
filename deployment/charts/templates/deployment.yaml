apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "secretcli-web.name" . }}-app
  {{- include "secretcli-web.labels" . | nindent 2 }}
    app: {{ template "secretcli-web.name" . }}
  annotations:
      # Use a hash of the ConfigMap to trigger a redeployment when it changes
      configmap-hash: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      values-hash: {{ .Values | toJson | sha256sum }} 
spec:
  replicas: {{ .Values.application.replicaCount }}
  {{- include "secretcli-web.selector" . | nindent 2 }}
      name: {{ template "secretcli-web.name" . }}
      component: app
  strategy:
    type: {{ .Values.updateStrategy.type }}  # Use update strategy from values.yaml
    rollingUpdate:
      maxSurge: {{ .Values.updateStrategy.rollingUpdate.maxSurge }}  # Max surge Pods
      maxUnavailable: {{ .Values.updateStrategy.rollingUpdate.maxUnavailable }}  # Max unavailable Pods

  template:
    {{- include "secretcli-web.metadata" . | nindent 4 }}
        name: {{ template "secretcli-web.name" . }}
        component: app
    spec:
      containers:       
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.backendRepository }}:{{ .Values.image.tag }}"
        imagePullPolicy: IfNotPresent
        {{- include "secretcli-web.envFrom" . | nindent 8 }}
        ports:
          - name: http
            containerPort: 8080
            protocol: TCP

        readinessProbe:  # Check if the application is ready to serve traffic
          {{- if .Values.readinessProbe.enabled }}
          httpGet:
            path: {{ .Values.readinessProbe.path }}
            port: http
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- end }}
        livenessProbe:  # Check if the application is still running
          {{- if .Values.livenessProbe.enabled }}
          httpGet:
            path: {{ .Values.livenessProbe.path }}
            port: http
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- end }}
